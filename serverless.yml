# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: kirtanmodi
# "app" enables Serverless Framework Dashboard features and sharing them with other Services.
app: intelebee-fintech-backend
# "service" is the name of this project. This will also be added to your AWS resource names.
service: intelebee-fintech-backend

provider:
  name: aws
  runtime: nodejs20.x
  region: us-east-1
  stage: ${opt:stage, 'dev'}
  environment:
    STRIPE_SECRET_KEY: ${env:STRIPE_SECRET_KEY}
    PAYRIX_API_KEY: ${env:PAYRIX_API_KEY}
  httpApi:
    cors: true

functions:
  # Express Account Functions
  createExpressOnboarding:
    handler: src/handlers/stripe.createExpressOnboardingLink
    events:
      - httpApi:
          path: /express/onboarding
          method: post

  createExpressDashboard:
    handler: src/handlers/stripe.createExpressDashboardLink
    events:
      - httpApi:
          path: /express/dashboard
          method: post

  updateExpressDashboard:
    handler: src/handlers/stripe.expressDashboardSettings
    events:
      - httpApi:
          path: /express/dashboard/settings
          method: post

  checkExpressAccountStatus:
    handler: src/handlers/stripe.checkExpressAccountStatus
    events:
      - httpApi:
          path: /check-standard-account-status/{accountId}
          method: get

  # Standard Account Functions
  createStandardOnboarding:
    handler: src/handlers/stripe.createStandardOnboardingLink
    events:
      - httpApi:
          path: /standard/onboarding
          method: post

  createStandardDashboard:
    handler: src/handlers/stripe.createStandardDashboardLink
    events:
      - httpApi:
          path: /standard/dashboard
          method: post

  createDirectPayment:
    handler: src/handlers/stripe.createDirectPayment
    events:
      - httpApi:
          path: /standard/direct-payment
          method: post

  createDirectRefund:
    handler: src/handlers/stripe.createDirectRefund
    events:
      - httpApi:
          path: /standard/direct-refund
          method: post

  updateStandardCapabilities:
    handler: src/handlers/stripe.updateStandardCapabilities
    events:
      - httpApi:
          path: /standard/capabilities
          method: post

  # Account Management Functions
  getAccounts:
    handler: src/handlers/stripe.getAllAccounts
    events:
      - httpApi:
          path: /get-all-accounts
          method: get

  deleteAccount:
    handler: src/handlers/stripe.deleteAccount
    events:
      - httpApi:
          path: /delete-account
          method: delete

  updateAccount:
    handler: src/handlers/stripe.updateAccountSettings
    events:
      - httpApi:
          path: /update-account-settings
          method: post

  checkAccountStatus:
    handler: src/handlers/stripe.checkAccountStatus
    events:
      - httpApi:
          path: /check-account-status
          method: get

  # Payment Functions
  createPayment:
    handler: src/handlers/stripe.createPayment
    events:
      - httpApi:
          path: /create-payment
          method: post

  createAccountSession:
    handler: src/handlers/stripe.createAccountSession
    events:
      - httpApi:
          path: /account-session
          method: post

  createCheckoutSession:
    handler: src/handlers/stripe.createCheckoutSession
    events:
      - httpApi:
          path: /create-checkout-session
          method: post

  # Payrix Functions
  createPayrixMerchant:
    handler: src/services/payrix/merchants.createMerchant
    events:
      - httpApi:
          path: /payrix/merchants
          method: post
          cors: true

  getMerchantDashboard:
    handler: src/handlers/payrix.getMerchantDashboard
    events:
      - httpApi:
          path: /payrix/merchants/{merchantId}/dashboard
          method: get
          cors: true

  updateMerchantOnboarding:
    handler: src/services/payrix/onboarding.updateMerchantOnboarding
    events:
      - httpApi:
          path: /payrix/merchants/{merchantId}/onboarding
          method: put
          cors: true

  getMerchants:
    handler: src/handlers/payrix.getMerchants
    events:
      - httpApi:
          path: /payrix/merchants
          method: get
          cors: true

  deleteMerchant:
    handler: src/handlers/payrix.deleteMerchant
    events:
      - httpApi:
          path: /payrix/merchants/{merchantId}
          method: delete
          cors: true

  createPayrixPayment:
    handler: src/handlers/payrix.createPayment
    events:
      - httpApi:
          path: /payrix/payment
          method: post
          cors: true

          

plugins:
  - serverless-offline
  - serverless-dotenv-plugin

custom:
  serverless-offline:
    httpPort: 3001
    noPrependStageInUrl: true
